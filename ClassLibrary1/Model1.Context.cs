//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClassLibrary1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Base_Module> Base_Module { get; set; }
        public DbSet<CostRates> CostRates { get; set; }
        public DbSet<DecorationProgressMax> DecorationProgressMax { get; set; }
        public DbSet<DecorationProgressMin> DecorationProgressMin { get; set; }
        public DbSet<FormId> FormId { get; set; }
        public DbSet<Grades> Grades { get; set; }
        public DbSet<Opinions> Opinions { get; set; }
        public DbSet<OrderDetails> OrderDetails { get; set; }
        public DbSet<Orders> Orders { get; set; }
        public DbSet<OwnerDeleteLogs> OwnerDeleteLogs { get; set; }
        public DbSet<OwnerIsStores> OwnerIsStores { get; set; }
        public DbSet<Owners> Owners { get; set; }
        public DbSet<PictureMaintain> PictureMaintain { get; set; }
        public DbSet<PointLogs> PointLogs { get; set; }
        public DbSet<Points> Points { get; set; }
        public DbSet<Profession> Profession { get; set; }
        public DbSet<Ranks> Ranks { get; set; }
        public DbSet<RecommendOwners> RecommendOwners { get; set; }
        public DbSet<RedPackets> RedPackets { get; set; }
        public DbSet<ReferenceUsers> ReferenceUsers { get; set; }
        public DbSet<RewardExamine> RewardExamine { get; set; }
        public DbSet<RewardSetDetails> RewardSetDetails { get; set; }
        public DbSet<RewardSetLogs> RewardSetLogs { get; set; }
        public DbSet<RewardSets> RewardSets { get; set; }
        public DbSet<SendMessageDetail> SendMessageDetail { get; set; }
        public DbSet<SendRecord> SendRecord { get; set; }
        public DbSet<Tests> Tests { get; set; }
        public DbSet<Trade> Trade { get; set; }
        public DbSet<TradeProgressMinRelation> TradeProgressMinRelation { get; set; }
        public DbSet<UserDeleteLogs> UserDeleteLogs { get; set; }
        public DbSet<Users> Users { get; set; }
        public DbSet<WXACode> WXACode { get; set; }
        public DbSet<WxPayOrder> WxPayOrder { get; set; }
        public DbSet<WxPayOrderNotify> WxPayOrderNotify { get; set; }
        public DbSet<WxPayOrderPostLog> WxPayOrderPostLog { get; set; }
        public DbSet<V_ZB> V_ZB { get; set; }
    
        [EdmFunction("Entities", "f_split")]
        public virtual IQueryable<f_split_Result> f_split(string c, string split)
        {
            var cParameter = c != null ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(string));
    
            var splitParameter = split != null ?
                new ObjectParameter("split", split) :
                new ObjectParameter("split", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f_split_Result>("[Entities].[f_split](@c, @split)", cParameter, splitParameter);
        }
    
        [EdmFunction("Entities", "GetOrderRanking")]
        public virtual IQueryable<GetOrderRanking_Result> GetOrderRanking(Nullable<System.DateTime> createDate)
        {
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetOrderRanking_Result>("[Entities].[GetOrderRanking](@CreateDate)", createDateParameter);
        }
    
        [EdmFunction("Entities", "GetOwnersRanking")]
        public virtual IQueryable<GetOwnersRanking_Result> GetOwnersRanking(Nullable<System.DateTime> createDate)
        {
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetOwnersRanking_Result>("[Entities].[GetOwnersRanking](@CreateDate)", createDateParameter);
        }
    
        [EdmFunction("Entities", "GetStoreOrderMoney")]
        public virtual IQueryable<GetStoreOrderMoney_Result> GetStoreOrderMoney(Nullable<System.DateTime> createDate)
        {
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetStoreOrderMoney_Result>("[Entities].[GetStoreOrderMoney](@CreateDate)", createDateParameter);
        }
    
        [EdmFunction("Entities", "GetUserAndOwnerRanking")]
        public virtual IQueryable<GetUserAndOwnerRanking_Result> GetUserAndOwnerRanking(Nullable<System.DateTime> createDate)
        {
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUserAndOwnerRanking_Result>("[Entities].[GetUserAndOwnerRanking](@CreateDate)", createDateParameter);
        }
    
        public virtual ObjectResult<P_ActiveUsers_Result> P_ActiveUsers(string sotreNo, Nullable<int> pageSize, Nullable<int> pageIndex, ObjectParameter pageCount)
        {
            var sotreNoParameter = sotreNo != null ?
                new ObjectParameter("sotreNo", sotreNo) :
                new ObjectParameter("sotreNo", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<P_ActiveUsers_Result>("P_ActiveUsers", sotreNoParameter, pageSizeParameter, pageIndexParameter, pageCount);
        }
    }
}
